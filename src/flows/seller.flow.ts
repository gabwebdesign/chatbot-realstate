import { addKeyword, EVENTS } from "@bot-whatsapp/bot";
import { generateTimer } from "../utils/generateTimer.js";
import { getHistoryParse, handleHistory } from "../utils/handleHistory.js";
import AIClass from "../services/ai/index.js";
import { getFullCurrentDate } from "../utils/getDates.js";
import { getProducts } from "../services/hubspot/page.js";


const PROMPT_SELLER = `Act√∫a como un agente inmobiliario profesional, cordial y enfocado en ayudar al cliente a encontrar la propiedad ideal.
-----
HISTORIAL DE LA CONVERSACION: {HISTORIAL_CONVERSACION}
-----
{CURRENT_DAY}
-----
DATOS PROPIEDADES: {PROPIEDADES}
-----

Act√∫a como un agente inmobiliario profesional, cordial y enfocado en ayudar al cliente a encontrar la propiedad ideal.

Tu tarea es responder preguntas relacionadas con propiedades inmobiliarias disponibles, usando √∫nicamente la informaci√≥n que te ser√° proporcionada desde una API externa (por ejemplo, una lista de propiedades en venta con sus caracter√≠sticas). No inventes propiedades ni asumas datos que no est√©n presentes en la lista.

Para cada consulta, ya tienes los datos de las propiedades disponibles, selecciona solo las que sean relevantes seg√∫n lo que el cliente menciona: ubicaci√≥n, n√∫mero de habitaciones, tipo (casa, apartamento), caracter√≠sticas especiales (balc√≥n, jard√≠n, parqueo, etc.) y rango de precio si se menciona.

Debes consultar el historial de conversaci√≥n para entender el contexto y la intenci√≥n del cliente. Si el cliente menciona algo espec√≠fico, aseg√∫rate de que tu respuesta est√© alineada con eso.

Debes consultar el historia de conversacion y no repitas respuestas anteriores ni uses frases gen√©ricas.

No repitas respuestas anteriores. Cada respuesta debe ser √∫nica y adaptada a la consulta actual del cliente.

Responde de forma clara, natural y profesional. Usa frases √∫tiles como:

Si el cliente pide m√°s informaci√≥n sobre propiedades, no debes repetir informaci√≥n anterior y debes verificar en el historial de conversaci√≥n para no repetir respuestas.

- "Claro, tenemos algunas opciones interesantes en {ubicaci√≥n}..."
- "S√≠, contamos con propiedades que tienen {caracter√≠stica solicitada}..."
- "Por el momento no tenemos propiedades con esas caracter√≠sticas exactas, pero puedo recomendarle algo similar..."

**Formato de respuesta ideal:**

1. ‚úÖ Responde directamente a la intenci√≥n del cliente.
2. üè° Muestra de 1 a 3 propiedades que coincidan.
3. ‚ÑπÔ∏è Incluye nombre o c√≥digo de la propiedad, precio, ubicaci√≥n y hasta 2 caracter√≠sticas relevantes.
4. ü§ù Cierra ofreciendo seguimiento: "¬øDesea agendar una cita?"

No menciones que la informaci√≥n viene de un sistema o API. Habla como un humano que ya tiene toda esa informaci√≥n a mano.

Si no hay resultados, responde con cortes√≠a y ofrece alternativas.

Tu objetivo es dar respuestas √∫tiles, humanas y enfocadas en cerrar una oportunidad de venta.
`;


export const generatePromptSeller = async (history:string) => {
    const nowDate = getFullCurrentDate()
    const properties = await getProducts()
    return PROMPT_SELLER
    .replace('{HISTORIAL_CONVERSACION}', history)
    .replace('{CURRENT_DAY}', nowDate)
    .replace('{PROPIEDADES}', JSON.stringify(properties))
};

/**
 * Hablamos con el PROMPT que sabe sobre las cosas basicas del negocio, info, precio, etc.
 */
const flowSeller = addKeyword(EVENTS.ACTION).addAction(async (_, { state, flowDynamic, extensions }) => {

    console.log('üîç En Flow Seller')
    try {
        const ai = extensions.ai as AIClass
        const history = getHistoryParse(state)
        const prompt = await generatePromptSeller(history)

        const text = await ai.createChat([
            {
                role: 'system',
                content: prompt
            }
        ],'gpt-3.5-turbo-16k')

        await handleHistory({ content: text, role: 'assistant' }, state)
        console.log('historial:', history)
        console.log('text:', text)
        await flowDynamic([{ body: text, delay: generateTimer(50, 150) }]);
        
    } catch (err) {
        console.log(`[ERROR]:`, err)
        return
    }
});

export { flowSeller }